---
title: "Targeted Lung Health Check user guide"
format: 
  html:
    theme: 
      light: flatly
      dark: darkly
    toc: true
    toc-depth: 2
    toc-title: Contents
editor: visual
---

# Introduction

This document provides an overview of the approach used in the calculation of data items and metrics from record-level data and in the generation of the monthly management information (MI) reports. It is split into two parts;

-   Quick start - instructions on setting up your project and producing monthly reports, and

-   Reference guide - explains each process in more detail and provides background information.

# Quick start

## First time set up

If this is the first time using this R project you will first need to install the dependency libraries, and if you are working at The Strategy Unit and intend on producing reports for sharing with projects you will also need to configure some environment variables to point to network folders.

### Libraries

This project is produced using [renv](https://rstudio.github.io/renv/articles/renv.html) to track which libraries are used in this project, specifically which versions of these libraries, so that you can recreate the same environment to run this code.

Run the following command in the Console:

```{r filename='Console'}
#| eval: false
#| echo: true
renv::restore()
```

The required libraries will be downloaded and installed to your project environment ready for use. Please note this step may take a little time to complete.

### .Renviron

If you are working at The Strategy Unit and will be involved in producing monthly management information (MI) reports then you will need access to aggregated data submission file from projects hosted on the CSU's Office 365 SharePoint server and on the Azure 'Z:/drive'.

You need to manually specify the paths to these locations in a way this R project can pick up. To create your .Renviron file please run the following in the Console:

```{r filename='Console'}
#| eval: false
#| echo: true
usethis::edit_r_environ("project")
```

If this is the first time you are using this project the above command will create an .Renviron file in the root of the project directory and open it for editing. Add entries for `base_365` and `base_azure`, as shown in these examples and configure them to your drive mappings:

```{r filename='.Renviron'}
#| eval: false
#| echo: true
base_365=C:/Users/user.name/path/to/project/610/tlhc
base_azure=//servername.nhs.uk/path/to/project/610/tlhc
```

**Please note the use of forward slashes** (instead of the usual windows backslashes) as this is what works best for the R interpreter.

Save this file, close it and restart your R session for the variables to be available for use.

With your dependencies loaded and your .Renviron file set up you are now set to proceed.

### Native pipe \|\>

This project has been written throughout using R's native pipe operator `|>` instead of the maggritr pipe operator `%>%`. The native pipe operator has been available for use since R v4.1.0 and can be configured for use by enabling a global option:

`Tools` \> `Global Options` \> `Code` \> toggle on the option for `Use native pipe operator`.

## Logic switchboard

Remembering the names of scripts and the order in which to run them can be tricky, so the following script provides convenient access to run the code used in this project. Think of it like a switchboard connecting you with the functionality within this project.

[scripts/tlhc_logic.R](scripts/tlhc_logic.R "Open tlhc_logic file")

To use it:

-   Open the script for editing within RStudio,

-   Load the `here` library (Ctrl+Enter) on line 7,

-   Choose your desired process and run it by pressing Ctrl+Enter. The scripts are ordered into a typical workflow consisting of:

    1.  [Downloading SQL data],

    2.  [Processing downloaded data],

    3.  [Calculating metric performance],

    4.  Ad-hoc and DQ reports (works in progress),

    5.  [Outputting datasheets] - producing monthly datasheets based on SQL data,

    6.  [Transferring datasheets] - transferring these datasheets to the azure file server,

    7.  [Collate datasheet information] - gather data from all datasheets from projects (SQL data and from projects who provide aggregate reports), to a single tibble

    8.  [Producing TLHC report],

    9.  [Producing the demographic report].

Each of these steps is described in more detail in the [Reference guide] section.

# Reference guide

## Downloading SQL data

### Pre-requisites

| Licence to access MLCSU's SQL Server
| VPN connected
| All packages installed (see [Libraries])

### To run

```{r filename='tlhc_logic.R'}
#| eval: false
#| echo: true
library(here)
source(here('scripts', 'tlhc_download_sql_data.R'))
```

### About

This script manages the download of data from the SQL server.

The data in question is the pseudonymised record-level data for some participants in the TLHC programme. These participants attended a care provider projects (henceforth referred to as *projects*), usually early adopters of the TLHC approach, are providing detailed data to help provide detailed views of the impact evaluation for the programme. These projects are usually early adopters of the TLHC approach, referred to as *Phase 1* projects.

Not all projects provide record-level data, an increasing number provide monthly aggregate reports on their activity. These projects, typically referred to as *Phase 2 & 3* projects instead submit single-sheet summaries of their activities, such as the number of invites sent, the number of lung health checks performed, and the number of CT scans completed.

Regardless of their type, each project provides monthly data conforming to the minimum dataset (MDS) which can be found the the Cancer Alliances Workspace on the NHS Futures site ([Evaluation templates](https://future.nhs.uk/canc/view?objectID=27196208)), NB, access requires an NHS Futures account and access to TLHC programme workspace.

The MDS for projects submitting record-level information comprises eight tables:

+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Table                     | Types of data collected                                                                                                                                                                    |
+===========================+============================================================================================================================================================================================+
| Demographics              | Age at referral, CCG, LSOA of residence, ethnicity                                                                                                                                         |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Other History             | Pre-existing conditions identified within primary care; COPD, IHD, cancer                                                                                                                  |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Pathway-Invite            | Details of the invitation to attend a lung health check; date of invites and follow-ups, outcome of invite                                                                                 |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Pathway-Lung Health Check | Attendance status, smoking history, whether in person or virtually (telephone / video call)                                                                                                |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Measurements              | Calculated risk scores (of lung cancer), height, weight, spirometry                                                                                                                        |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Pathway-LDCT              | Patients who exceed a risk threshold are offered a low-dose CT scan (LDCT), this table is used to record whether the scan took place, key findings, onward referrals to other specialities |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Pathway-Diagnostics       | Detailed metrics from LDCT such as whether; full dose CT scan used, bronchoscopy undertaken                                                                                                |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Pathway-Smoking Cessation | Records details of who is offered, takes up and successfully completes a smoking cessation course                                                                                          |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

: Record-level tables

Projects submitting record-level data usually do so either by:

-   discrete monthly submissions on activity occurring the previous month, or,

-   submitting their whole cohort each month in a rolling submission, or,

-   occasionally, a mix of above the above two approaches.

This means there is a large amount of duplicate data in the SQL database, with multiple duplicate records exist for the same patient as their record is resubmitted each month, or iterative submissions for the same patient where more details are added to their record over time.

For example, a patient receiving an invitation to attend a lung health check one month may have a demographic record submitted about them and details of their invitation but an empty record for their lung health check (because it hasn't happened yet). The next month the patient receives a lung health check so the project submits a more detailed record for them which may include a more detailed demographic record (as more is known about the patient), the outcome from the invite (whether the patient accepted it or not) and details about their lung health check (what date it was on, how it took place, some details the patient gave about themselves).

As the SQL database contains details for each and every successful submission there is a lot of data to work with. So the challenge facing us is how to filter all this data to give us just the pertinent information that represents the best picture of what is happening across these projects.

### How tables are downloaded

The solution for most tables is to group by `ParticipantID` and take the latest supplied data, based on the assumption that the quality and accuracy of information improves for each successive submission (or at least doesn't get any worse).

For example, a record on the Invites table contains the date a participant was invited to attend their LHC when it is submitted. Let us imagine the patient doesn't respond to this initial invite so next month a follow-up invite is sent and that month's submission contains a record that now contains an initial invite date and a follow-up date for this patient. Let's then imagine the subsequent month the patient responded to the invite and their record is outcomed with the status 'Patient accepted' and is then submitted with an initial invite date, a follow-up invite date, and an outcome status. We now have three records for this patient in the SQL database table submitted over three successive months, where the latest supplied record contains the most complete and accurate data of the patient's invite status. Thus the latest supplied data per participant is the record we wish to use.

This approach won't work for the LDCT and Diagnostics tables, however, as a patient can legitimately have multiple scans. The approach for these tables is to get one record per combination of participant and date of scan.

The approach for downloading from the SQL server data can be described in the following table:

+-------------------+------------------------------------------------------------------------------------------------------------------------------------+
| TLHC table(s)     | How data are downloaded                                                                                                            |
+===================+====================================================================================================================================+
| Demographics      | One record per `ParticipantID`                                                                                                     |
|                   |                                                                                                                                    |
| Other History     | If multiple records per participant exist then the latest record is used, as identified from a combination of:                     |
|                   |                                                                                                                                    |
| Invitations       | -   `ReceivedDate` (date the data was received by MLCSU), and                                                                      |
|                   |                                                                                                                                    |
| Lung Health Check | -   `CSURowNumber` (a field created by the SQL server).                                                                            |
|                   |                                                                                                                                    |
| Measurements      | If multiples still exist per `ParticipantID` then the first record in the list is selected.                                        |
|                   |                                                                                                                                    |
| Smoking cessation |                                                                                                                                    |
+-------------------+------------------------------------------------------------------------------------------------------------------------------------+
| LDCT              | One record per combination of `ParticipantID` and `LDCT_Date`                                                                      |
|                   |                                                                                                                                    |
|                   | If multiple records exist per combination then the latest record is used, as identified from a combination of:                     |
|                   |                                                                                                                                    |
|                   | -   `ReceivedDate` (date the data was received by MLCSU), and                                                                      |
|                   |                                                                                                                                    |
|                   | -   `CSURowNumber` (a field created by the SQL server).                                                                            |
|                   |                                                                                                                                    |
|                   | If multiples still exist per combination of `ParticipantID` and `LDCT_Date` then the first record in the list is selected.         |
+-------------------+------------------------------------------------------------------------------------------------------------------------------------+
| Diagnostics       | One record per combination of `ParticipantID` and `Full_Dose_CT_Date`                                                              |
|                   |                                                                                                                                    |
|                   | If multiple records exist per combination then the latest record is used, as identified from a combination of:                     |
|                   |                                                                                                                                    |
|                   | -   `ReceivedDate` (date the data was received by MLCSU), and                                                                      |
|                   |                                                                                                                                    |
|                   | -   `CSURowNumber` (a field created by the SQL server).                                                                            |
|                   |                                                                                                                                    |
|                   | If multiples still exist per combination of `ParticipantID` and `Full_Dose_CT_Date` then the first record in the list is selected. |
+-------------------+------------------------------------------------------------------------------------------------------------------------------------+

: SQL download algorithm

## Processing downloaded data

### Pre-requisites

| [.Renviron] configured
| All packages installed (see [Libraries])
| [Downloading SQL data] step completed

```{r filename='tlhc_logic.R'}
#| eval: false
#| echo: true
library(here)
source(here('scripts', 'tlhc_process_sql_data.R'))
```

### About

The aim of this script is to prepare data for metric calculations by ensuring dates are recognised and standardising commonly-used fields. It processes all eight tables downloaded from SQL in the above step and produces a further eight tables containing the original data plus the calculated dates and standardised fields.

### Date processing

Dates are a vital part of the data submissions as they form the time dimension against which the MI data is reported, e.g. number of invitations *per month*, the number of LHCs *per month*, the number of scans undertaken *per month*.

Data are submitted by projects as comma-separate text files, .csv. As such all dates are provided as character strings which need to be parsed into date types recognised by R before we can use them to work out these measures. There are a number of different patterns in use by projects:

+---------------------+------------------------------------------------+
| Pattern             | Example submitted date to be parsed            |
+=====================+================================================+
| '%d/%m/%Y'          | 01/01/2022                                     |
+---------------------+------------------------------------------------+
| '%d/%m/%Y %H:%M'    | 01/02/2022 10:30                               |
+---------------------+------------------------------------------------+
| '%b %d %Y %H:%M'    | Mar 1 2022 11:30                               |
+---------------------+------------------------------------------------+
| '%d-%m-%y'          | 01-04-22                                       |
+---------------------+------------------------------------------------+
| '%Y-%m-%d %H:%M:%S' | 2022-05-01 00:00:00                            |
+---------------------+------------------------------------------------+
| '%Y%m%d'            | 20220101                                       |
+---------------------+------------------------------------------------+
| '%d-%b-%y'          | 25-Aug-21                                      |
+---------------------+------------------------------------------------+

: Date parsing patterns

In addition some dates are supplied in Excel integer format, that is the number of days since an arbitrary date in the past, the origin point which is set as 30th December 1899 in MS Excel 365. These dates appear as a five digit string, e.g. `44971` corresponding to the date 14th February 2023.

### Standardising key fields

There are fields containing categorical data that are crucial to the calculation of MI reports, such as whether the patient accepted their LHC invitation, or whether the patient attended their LHC, or what the outcome of the LDCT scan was.

The categories of values permitted within these fields is specified in the MDS, yet, a range of values are routinely provided which first require standardising before metrics can be effectively calculated.

The fields this data cleaning process is applied to includes:

-   Invite outcome,

-   LHC attendance category,

-   LHC delivery mode,

-   Reason where patients are ineligible for an LDCT,

-   LDCT scan outcome,

-   Smoking cessation completed successfully, and

-   Demographic details such as gender, ethnicity, martial status, smoking status,

Finally, there are a number of statuses calculated from supplied data that are required in the calculation of metrics, including:

-   flags indicating validity of `ParticipantID` and `TransactionId` values,

-   the name of the submitting organisation (based on `SubmittedZipFile`),

-   the deprivation decile (based on the residential `LSOA` code for the participant),

-   age group,

-   eligibility of the participant for the TLHC programme (based on `Invite Outcome`),

-   invite outcome date (depends on the latest value in `First_Letter_Date`, `Second_Letter_Date`, `Follow_up_call_Date` and `Contact_Date`), and

-   scan sequencing and classification into initial, 3 month follow-up, 12 month follow-up, 24 month follow-up and 48 month follow-up.

This processing step produces eight further .Rds files, one for each of the base tables, identified by a prefix of 'calc\_' in the filename and stored in the 'tlhc' subfolder of 'data'. These tables are now ready for use in calculating metric performance.

## Calculating metric performance

### Pre-requisites

| [.Renviron] configured
| All packages installed (see [Libraries])

### To run

```{r filename='tlhc_logic.R'}
#| eval: false
#| echo: true
library(here)
source(here('scripts', 'tlhc_metrics.R'))
```

### About

This step takes processed data and produces a set of records per metric which are then aggregated to produce a count per metric per month per project.

## Outputting datasheets

Output the results of the SQL data collation process into separate datasheets ready to go into DATA NEW folders.

## Transferring datasheets

Transfer the files generated by TLHC DATASHEET OUTPUT to the DATA NEW folder.

Navigate the file system on DATA NEW

Test if a file exists already

If it exists, then archive the current file and replace with new one

If it is new then add to the file system

## Collate datasheet information

To provide a source of data for Management Information (MI) reporting for the TLHC project.

OBJECTIVES

1\. Collate submitted data (in the form of .xls\* datasheets) from participating projects to a single data source

2\. Output the consolidated data as an .Rds file - for use in generating the TLHC report

3\. Output a flat file for sharing with NHSE

## Producing TLHC report

To produce a TLHC report

OBJECTIVES

Load mi data file

Cycle over projects and output a pivot_wider table

## Producing the demographic report

Calculate demographic reports
